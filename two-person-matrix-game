#!/usr/bin/env perl
use strict;
use warnings;

use Algorithm::Combinatorics qw( variations_with_repetition );
use List::MoreUtils qw( all );

# Player strategies.
my $p1 = {
    1 => [1,1,3],
    2 => [0,0,3],
    3 => [0,2,5],
};
my $p2 = {
    1 => [0,2,2],
    2 => [3,1,4],
    3 => [0,0,3],
};

# Bucket of X|Y strategy pair utilities.
my $utility = {};

reduce_game($p2);
reduce_game($p1);

sub reduce_game {
    my $player = shift;
use Data::Dumper;warn Data::Dumper->new([$player])->Indent(1)->Terse(1)->Quotekeys(0)->Sortkeys(1)->Dump;

    # Evaluate pairs of strategies.
    my $iter = variations_with_repetition([keys %$player], 2);
    while (my $v = $iter->next) {
        next if $v->[0] eq $v->[1];

#warn join(', ', @$v), "\n";
        for my $i (0 .. @$v) {
#warn "$i: $player->{$v->[0]}[$i] vs $player->{$v->[1]}[$i]\n";
            if ($player->{$v->[0]}[$i] > $player->{$v->[1]}[$i]) {
                # Strictly dominant utility
                push @{ $utility->{join '|', @$v} }, 1;
            }
            elsif ($player->{$v->[0]}[$i] < $player->{$v->[1]}[$i]) {
                # Strictly dominated utility
                push @{ $utility->{join '|', @$v} }, -1;
            }
            else {
                # Equivalent utility
                push @{ $utility->{join '|', @$v} }, 0;
            }
        }
    }
#use Data::Dumper;warn Data::Dumper->new([$utility])->Indent(1)->Terse(1)->Quotekeys(0)->Sortkeys(1)->Dump;

    # Remove strictly dominated strategies.
    for my $strat (keys %$utility) {
        if (all { $_ == -1 } @{$utility->{$strat}}) {
            my @dominated = split /\|/, $strat;
#warn "U:[@{$utility->{$strat}}]\n";
#warn "D:'$dominated[0]'\n";
            delete $player->{$dominated[0]};
            # Delete the oppositing utilities for the opponent strategy.
#            splice...
            last;
        } 
    }
use Data::Dumper;warn Data::Dumper->new([$player])->Indent(1)->Terse(1)->Quotekeys(0)->Sortkeys(1)->Dump;
}
