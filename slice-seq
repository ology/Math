#!/usr/bin/env perl
use strict;
use warnings;

use Math::Big qw( fibonacci primes );
use Math::BigInt try => 'GMP';

my $max = shift || 20;
my $mod = shift || 6;

my $w = length $max;
my $z = length $mod;

my $html = "$0.html";
open(my $content, '>', $html) or die "Can't write to '$html': $!";
print $content "<html>\n<body>\n<table>\n\n";

#for my $m (31) {
for my $m (2 .. $mod) {
    # Get the modulus as a bigint
    my $bm = Math::BigInt->new($m);

    print $content "<tr>\n\n"; # Start table row

    for (my $x = 2; $x <= $max; $x += 10) {
        my $name = sprintf '%s-%0*d-%0*d', $0, $w, $x, $z, $m;
        my $file = $name . '.dat';
        open(my $dat, '>', $file) or die "Can't write to '$file': $!";

        print $content "<td>"; # Start table cell

        my $i = 1;
        for my $n (primes($x)) {
            my $p = Math::BigInt->new($n);
            $p->bmod($bm);
            my $fib = fibonacci($n);
            my $f = Math::BigInt->new($fib);
            $f->bmod($bm);

            print "[$i,$x] mod=$m\tprime=$n ($p)\tfib=$fib ($f)\n";

            print $dat "$p\t$f\n";

            $i++;
        }
        print $content qq|<a href="$name.png"><img src="$name.png" width="100 height="100"/></a>|; # Table cell data

        print $content "</td>\n\n"; # End table cell

        close $dat;
    }

    print $content "</tr>\n\n"; # End table row
}

print $content "\n\n</table>\n</body>\n</html>";
close $content;
