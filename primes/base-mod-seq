#!/usr/bin/env perl
#
# Modulo transform a numerical sequence into an alternate set of "digits."
# Usage: perl base-mod-seq [M B p|f 0 1 2 a b c...] where 
#  M is the either the prime ceiling or the number of fibonacci.
#  B is the number base to which to convert each number of the series.
#  p or f stands for primes or fibonacci.
#  0 1 2... is the set of base "digits" into which each number of the series is
#    tranformed into.
# All arguments optional with defaults: M=20, B=6, Primes, Digits=0-5
#
use strict;
use warnings;

use Math::Big qw(primes fibonacci);

# The limit is either the prime ceiling or the number of fibonacci.
my $limit = shift || 20;
# The number base to which to convert each number of the series.
my $base = shift || 6;
# The sequence to transform.
my $sequence = shift || 'primes';
# The actual digits to use for transformation.
my @digits = @ARGV ? @ARGV : (0 .. 9, 'A' .. 'Z')[0 .. $base - 1];

# Fetch our sequence.
my @sequence = ();
if ($sequence =~ /^p/) {
    @sequence = primes($limit);
}
elsif ($sequence =~ /^f/) {
    @sequence = fibonacci($limit);
}
else {
    die "ERROR: Unknown sequence: $sequence.\n";
}

# Transform the series.
convert_series(\@sequence, $limit, \@digits);

sub convert_series {
    my ($sequence, $limit, $digits) = @_;

    # Compute the length of the final converted sequence number.
    my $field = length(Math::Big::to_base($sequence[-1], $base, join('', @$digits))) + 1;

    # Convenience variables.
    my $seq_len  = length scalar @$sequence;
    my $last_len = length $sequence->[-1];

    # Display a column header.
    print "Index. Sequence number n (digit sum) | n % ",
        scalar(@$digits), " | convert n to base $base | digit count | ratio\n";
    printf "%*s. %*s %*s %*s %*s %s => %s\n",
        $seq_len, '#',
        $last_len, 'n',
        $last_len + 1, '+',
        $last_len + 1, '%',
        $field, "B$base",
        'Digits',
        'Ratio';

    # How many of each digit?
    my %count = ();

    # Initialize our counter.
    my $i = 0;

    # Accumulate the cycle.
    for my $n (@$sequence) {
        # Initialize our calculation results.
        my ($sum, $modulus, $to_base) = (0, 0, 0);

        # Sum the digits of the number.
        $sum += $_ for split //, $n;
        # XXX Why? Because curiosity.

        # Find the modulus of the number by the base.
        $modulus = $n % scalar @$digits;

        # Convert the number to our chosen base.
        $to_base = Math::Big::to_base($n, $base, join('', @$digits));
        my $len = length $to_base;

        # Count the number of digits seen in the base converted representation.
        $count{$_} = eval "'$to_base' =~ tr/$_/$_/" for @$digits;

        # Display each index, term, digit sum, modulo and base-converted number
        # & ratio of digits to length of base converted number.
        printf "%*d. %*s (%*d) %2s %*s %s => %s\n",
            $seq_len, ++$i,
            $last_len, $n,
            $last_len, $sum,
            $modulus,
            $field, $to_base,
            join(',', @count{@$digits}),
            join(',', map { sprintf '%.2f', $_ / $len } @count{@$digits})
        ;
    }
}

__END__
M=20, B=6, Primes, Digits=C D E F G A
Index. Sequence number n (digit sum) | n % 7 | convert n to base 6 | digits
 #.  n   +   %   B6 Digits
 1.  2 ( 2)  2    D 0,0,1,0,0,0,0
 2.  3 ( 3)  3    E 0,0,0,1,0,0,0
 3.  5 ( 5)  5    G 0,0,0,0,0,1,0
 4.  7 ( 7)  0   CC 0,2,0,0,0,0,0
 5. 11 ( 2)  4   CG 0,1,0,0,0,1,0
 6. 13 ( 4)  6   DC 0,1,1,0,0,0,0
 7. 17 ( 8)  3   DG 0,0,1,0,0,1,0
 8. 19 (10)  5   EC 0,1,0,1,0,0,0
 9. 23 ( 5)  2   EG 0,0,0,1,0,1,0
10. 29 (11)  1   FG 0,0,0,0,1,1,0
11. 31 ( 4)  3   GC 0,1,0,0,0,1,0
12. 37 (10)  2  C0C 1,2,0,0,0,0,0
13. 41 ( 5)  6  C0G 1,1,0,0,0,1,0
14. 43 ( 7)  1  CCC 0,3,0,0,0,0,0
15. 47 (11)  5  CCG 0,2,0,0,0,1,0
16. 53 ( 8)  4  CDG 0,1,1,0,0,1,0
17. 59 (14)  3  CEG 0,1,0,1,0,1,0
18. 61 ( 7)  5  CFC 0,2,0,0,1,0,0
19. 67 (13)  4  CGC 0,2,0,0,0,1,0
20. 71 ( 8)  1  CGG 0,1,0,0,0,2,0
21. 73 (10)  3  D0C 1,1,1,0,0,0,0
22. 79 (16)  2  DCC 0,2,1,0,0,0,0
23. 83 (11)  6  DCG 0,1,1,0,0,1,0
24. 89 (17)  5  DDG 0,0,2,0,0,1,0
25. 97 (16)  6  DFC 0,1,1,0,1,0,0
