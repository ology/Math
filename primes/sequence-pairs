#!/usr/bin/env perl
use strict;
use warnings;

use Math::Prime::XS qw(primes);
use List::MoreUtils qw(firstidx);
use Statistics::Frequency;
use Statistics::R;

my $start = shift // 2;
my $stop  = shift // 6;
my $limit = shift // 10;

my @primes = primes($limit);

my $R = Statistics::R->new;

for my $mod ( $start .. $stop ) {
    my @sequence = map { $_ % $mod } @primes;

    my $index = firstidx { $_ == $start } @sequence;

    # Slice the sequence given the start index
    @sequence = @sequence[ $index .. @sequence  - 1 ];
    #use Data::Dumper::Concise;warn Dumper\@sequence;

    my ( $last, @x, @y, %seen, @plotx, @ploty );

    my ( $minimum, $count ) = ( 0, 0 );

    for my $p ( 0 .. @sequence - 1 ) {
        if ( defined $last ) {
            $count++;
            my $key = $sequence[$last] . '.' . $sequence[$p];
            if ( !$seen{$key}++ ) {
                $minimum = $count;
                push @plotx, $sequence[$last];
                push @ploty, $sequence[$p];
            }
            push @x, $sequence[$last];
            push @y, $sequence[$p];
            $last = $p;
        }
        else {
            $last = $p;
            next;
        }
    }

    #printf "Modulo: $mod, Minimum: $minimum\n";

    my $freq = Statistics::Frequency->new;
    $freq->add_data(@y);
    my %prop = $freq->proportional_frequencies;
    #use Data::Dumper::Concise;warn Dumper\%prop;

    #print join("\n", @x), "\n";
    #print join("\n", @y), "\n";
    #print join("\n", map { $prop{$_} } @y), "\n";

    my $file = sprintf '%s-mod-%.*d.png', $0, length($stop), $mod;
    $R->run( "png(file='$file')" );
    $R->run( 'x <- c(' . join( ',', @plotx ) . ')' );
    $R->run( 'y <- c(' . join( ',', @ploty ) . ')' );
    $R->run( 'z <- c(' . join( ',', map { $prop{$_} } @ploty ) . ')' );
    # Single fixed upper bound:
#    $R->run( "plot(x, y, pch=21, bg=gray(z), xlab='P', ylab='P+1', xlim=c(0, $stop), ylim=c(0, $stop), main='Successive Primes to $limit Modulo $mod')" );
    # Growing upper bound:
    $R->run( "plot(x, y, pch=21, bg=gray(z), xlab='P', ylab='P+1', main='Successive Primes to $limit Modulo $mod')" );
    $R->run( 'dev.off()' );
}

$R->stop();
