#!/usr/bin/env perl
use strict;
use warnings;

use List::Util qw(sum0);
use Math::BigRat;
use Math::Prime::XS qw(primes);

my $max = shift || 1000;

my @primes = primes($max);

# Count the number of times a digit is seen
my %digits;
for my $prime ( @primes ) {
    my @parts = split //, $prime;
    $digits{$_}++ for @parts;
}

# Find the total of all digits seen
my $total = sum0 values %digits;

# Compute the proportional frequencies
for my $digit ( keys %digits ) {
    $digits{$digit} = Math::BigRat->new(
        Math::BigInt->new( $digits{$digit} ),
        Math::BigInt->new($total)
    );
}

# Output the frequencies in sorted order
for my $digit ( sort { $digits{$a} <=> $digits{$b} || $a <=> $b } keys %digits ) {
    print "$digit: ", $digits{$digit}->as_float, "\n";
#    printf "%d: %.4f\n", $digit, $digits{$digit}->as_float;
}
