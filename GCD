#!/usr/bin/env perl
use strict;
use warnings;

# Euclid's greatest common divisor, but with the added convenience of computing on more than 2 numbers.

# Output usage when less than two arguments are given.
die "Euclid greatest common divisor for 2 or more numbers\nUsage: perl $0 m k [x y ...]\n"
    unless @ARGV >= 2;

# Find the initial pair g.c.d.
my $gcd = gcd( shift, shift );

# Find the subsequent g.c.d. for any remaining numbers.
$gcd = gcd( $_, $gcd ) for @ARGV;

# Output the final greatest common factor.
print $gcd;

sub gcd { # Euclid's algorithm.
    my ( $m, $k ) = @_;
    warn sprintf "%d : %d\n", $m, $k;
    # If we've reached a zero remainder, stop, otherwise recurse.
    return $k == 0 ? $m : gcd($k, $m % $k);
}

__END__
Example:
> perl GCD 1107 2106 3105 4104 5103 6102 7101
1107 : 2106
2106 : 1107
1107 : 999
999 : 108
108 : 27
27 : 0
3105 : 27
27 : 0
4104 : 27
27 : 0
5103 : 27
27 : 0
6102 : 27
27 : 0
7101 : 27
27 : 0
